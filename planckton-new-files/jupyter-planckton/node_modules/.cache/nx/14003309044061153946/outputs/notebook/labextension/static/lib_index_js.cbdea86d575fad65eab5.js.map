{"version":3,"file":"lib_index_js.cbdea86d575fad65eab5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACqD;AAC0B;AACpB;AACH;AACF;AACN;AACgE;AACnB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B;AACA,QAAQ,kEAAgB;AACxB,QAAQ,iEAAe;AACvB,QAAQ,8EAAmB;AAC3B,QAAQ,yEAAc;AACtB,QAAQ,8DAAS;AACjB,QAAQ,wEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC,wBAAwB,6DAAU;AAClC;AACA,iCAAiC,6DAAU;AAC3C,6BAA6B,iDAAI,GAAG,UAAU;AAC9C;AACA,2GAA2G,oFAAyB;AACpI;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAuD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,+BAA+B,SAAS;AACxC,SAAS;AACT;AACA;AACA;AACA,0CAA0C,2EAAoB;AAC9D;AACA;AACA;AACA,0BAA0B,iEAAU;AACpC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA,gCAAgC,oDAAO;AACvC;AACA,kCAAkC,oEAAa;AAC/C;AACA;AACA,oCAAoC,oDAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe;AAC9B;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAM,MAAM,6DAAU;AAClD;AACA,aAAa;AACb,SAAS;AACT;AACA,8BAA8B,kDAAkD;AAChF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://@jupyter-notebook/lab-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell, } from '@jupyterlab/application';\nimport { ICommandPalette, IToolbarWidgetRegistry } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Menu, MenuBar } from '@lumino/widgets';\nimport { defaultNotebookPathOpener, INotebookPathOpener, INotebookShell, } from '@jupyter-notebook/application';\nimport { caretDownIcon, CommandToolbarButton, launchIcon, } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Launch Jupyter Notebook Tree\n     */\n    CommandIDs.launchNotebookTree = 'jupyter-notebook:launch-tree';\n    /**\n     * Open Jupyter Notebook\n     */\n    CommandIDs.openNotebook = 'jupyter-notebook:open-notebook';\n    /**\n     * Open in JupyterLab\n     */\n    CommandIDs.openLab = 'jupyter-notebook:open-lab';\n    /**\n     * Open in NbClassic\n     */\n    CommandIDs.openNbClassic = 'jupyter-notebook:open-nbclassic';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to add custom toolbar items to the notebook page\n */\nconst interfaceSwitcher = {\n    id: '@jupyter-notebook/lab-extension:interface-switcher',\n    description: 'A plugin to add custom toolbar items to the notebook page.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [\n        INotebookTracker,\n        ICommandPalette,\n        INotebookPathOpener,\n        INotebookShell,\n        ILabShell,\n        IToolbarWidgetRegistry,\n    ],\n    activate: (app, translator, notebookTracker, palette, notebookPathOpener, notebookShell, labShell, toolbarRegistry) => {\n        if (!notebookTracker) {\n            // bail if trying to use this plugin without a notebook tracker\n            return;\n        }\n        const { commands, shell } = app;\n        const baseUrl = PageConfig.getBaseUrl();\n        const trans = translator.load('notebook');\n        const nbClassicEnabled = PageConfig.getOption('nbclassic_enabled') === 'true';\n        const switcher = new Menu({ commands });\n        const switcherOptions = [];\n        const opener = notebookPathOpener !== null && notebookPathOpener !== void 0 ? notebookPathOpener : defaultNotebookPathOpener;\n        if (!notebookShell) {\n            switcherOptions.push({\n                command: CommandIDs.openNotebook,\n                commandLabel: trans.__('Notebook'),\n                commandDescription: trans.__('Open in %1', 'Jupyter Notebook'),\n                buttonLabel: 'openNotebook',\n                urlPrefix: `${baseUrl}tree`,\n            });\n        }\n        if (!labShell) {\n            switcherOptions.push({\n                command: CommandIDs.openLab,\n                commandLabel: trans.__('JupyterLab'),\n                commandDescription: trans.__('Open in %1', 'JupyterLab'),\n                buttonLabel: 'openLab',\n                urlPrefix: `${baseUrl}doc/tree`,\n            });\n        }\n        if (nbClassicEnabled) {\n            switcherOptions.push({\n                command: CommandIDs.openNbClassic,\n                commandLabel: trans.__('NbClassic'),\n                commandDescription: trans.__('Open in %1', 'NbClassic'),\n                buttonLabel: 'openNbClassic',\n                urlPrefix: `${baseUrl}nbclassic/notebooks`,\n            });\n        }\n        const isEnabled = () => {\n            return (notebookTracker.currentWidget !== null &&\n                notebookTracker.currentWidget === shell.currentWidget);\n        };\n        const addSwitcherCommand = (option) => {\n            const { command, commandLabel, commandDescription, urlPrefix } = option;\n            const execute = () => {\n                const current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                opener.open({\n                    prefix: urlPrefix,\n                    path: current.context.path,\n                });\n            };\n            commands.addCommand(command, {\n                label: (args) => {\n                    args.noLabel ? '' : commandLabel;\n                    if (args.isMenu || args.isPalette) {\n                        return commandDescription;\n                    }\n                    return commandLabel;\n                },\n                caption: commandLabel,\n                execute,\n                isEnabled,\n            });\n            if (palette) {\n                palette.addItem({\n                    command,\n                    category: 'Other',\n                    args: { isPalette: true },\n                });\n            }\n        };\n        switcherOptions.forEach((option) => {\n            const { command } = option;\n            addSwitcherCommand(option);\n            switcher.addItem({ command });\n        });\n        let toolbarFactory;\n        if (switcherOptions.length === 1) {\n            toolbarFactory = (panel) => {\n                const toolbarButton = new CommandToolbarButton({\n                    commands,\n                    id: switcherOptions[0].command,\n                    label: switcherOptions[0].commandLabel,\n                    icon: launchIcon,\n                });\n                toolbarButton.addClass('jp-nb-interface-switcher-button');\n                return toolbarButton;\n            };\n        }\n        else {\n            const overflowOptions = {\n                overflowMenuOptions: { isVisible: false },\n            };\n            const menubar = new MenuBar(overflowOptions);\n            switcher.title.label = trans.__('Open in...');\n            switcher.title.icon = caretDownIcon;\n            menubar.addMenu(switcher);\n            toolbarFactory = (panel) => {\n                const menubar = new MenuBar(overflowOptions);\n                menubar.addMenu(switcher);\n                menubar.addClass('jp-InterfaceSwitcher');\n                return menubar;\n            };\n        }\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('Notebook', 'interfaceSwitcher', toolbarFactory);\n        }\n    },\n};\n/**\n * A plugin to add a command to open the Jupyter Notebook Tree.\n */\nconst launchNotebookTree = {\n    id: '@jupyter-notebook/lab-extension:launch-tree',\n    description: 'A plugin to add a command to open the Jupyter Notebook Tree.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const { commands } = app;\n        const trans = translator.load('notebook');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.launchNotebookTree, {\n            label: trans.__('Launch Jupyter Notebook File Browser'),\n            execute: () => {\n                const url = URLExt.join(PageConfig.getBaseUrl(), 'tree');\n                window.open(url);\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.launchNotebookTree, category });\n        }\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    launchNotebookTree,\n    interfaceSwitcher,\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}