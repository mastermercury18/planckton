"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["packages_tree-extension_lib_index_js"],{

/***/ "../packages/tree-extension/lib/fileactions.js":
/*!*****************************************************!*\
  !*** ../packages/tree-extension/lib/fileactions.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilesActionButtons: () => (/* binding */ FilesActionButtons)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\nclass FilesActionButtons {\n    /**\n     * The constructor of FilesActionButtons.\n     * @param options\n     */\n    constructor(options) {\n        /**\n         * Triggered when the selection change in file browser.\n         */\n        this._onSelectionChanged = () => {\n            var _a, _b, _c, _d, _e, _f;\n            const selectedItems = Array.from(this._browser.selectedItems());\n            const selection = selectedItems.length > 0;\n            const oneFolder = selectedItems.some((item) => item.type === 'directory');\n            (_a = this._widgets.get('placeholder')) === null || _a === void 0 ? void 0 : _a.setHidden(selection);\n            (_b = this._widgets.get('delete')) === null || _b === void 0 ? void 0 : _b.setHidden(!selection);\n            (_c = this._widgets.get('duplicate')) === null || _c === void 0 ? void 0 : _c.setHidden(!selection || oneFolder);\n            (_d = this._widgets.get('download')) === null || _d === void 0 ? void 0 : _d.setHidden(!selection || oneFolder);\n            (_e = this._widgets.get('open')) === null || _e === void 0 ? void 0 : _e.setHidden(!selection || oneFolder);\n            (_f = this._widgets.get('rename')) === null || _f === void 0 ? void 0 : _f.setHidden(selectedItems.length !== 1);\n        };\n        this._widgets = new Map();\n        this._browser = options.browser;\n        const { commands, selectionChanged, translator } = options;\n        const trans = translator.load('notebook');\n        // Placeholder, when no file is selected.\n        const placeholder = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ReactWidget.create(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: 'placeholder' }, trans.__('Select items to perform actions on them.')));\n        placeholder.id = 'fileAction-placeholder';\n        this._widgets.set('placeholder', placeholder);\n        // The action buttons.\n        const actions = ['open', 'download', 'rename', 'duplicate', 'delete'];\n        actions.forEach((action) => {\n            const widget = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ReactWidget.create(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButtonComponent, { key: action, commands: commands, id: `filebrowser:${action}`, args: { toolbar: true }, icon: undefined }));\n            widget.id = `fileAction-${action}`;\n            widget.addClass('jp-ToolbarButton');\n            widget.addClass('jp-FileAction');\n            this._widgets.set(action, widget);\n        });\n        selectionChanged.connect(this._onSelectionChanged, this);\n        this._onSelectionChanged();\n    }\n    /**\n     * Return an iterator with all the action widgets.\n     */\n    get widgets() {\n        return this._widgets.values();\n    }\n}\n\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/tree-extension/lib/fileactions.js?\n}");

/***/ }),

/***/ "../packages/tree-extension/lib/index.js":
/*!***********************************************!*\
  !*** ../packages/tree-extension/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/filebrowser */ \"webpack/sharing/consume/default/@jupyterlab/filebrowser/@jupyterlab/filebrowser\");\n/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/settingregistry */ \"webpack/sharing/consume/default/@jupyterlab/settingregistry/@jupyterlab/settingregistry\");\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jupyterlab_running__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/running */ \"webpack/sharing/consume/default/@jupyterlab/running/@jupyterlab/running\");\n/* harmony import */ var _jupyterlab_running__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_running__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jupyterlab_settingeditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/settingeditor */ \"webpack/sharing/consume/default/@jupyterlab/settingeditor/@jupyterlab/settingeditor\");\n/* harmony import */ var _jupyterlab_settingeditor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingeditor__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jupyterlab/ui-components */ \"webpack/sharing/consume/default/@jupyterlab/ui-components/@jupyterlab/ui-components\");\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lumino/signaling */ \"webpack/sharing/consume/default/@lumino/signaling/@lumino/signaling\");\n/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_lumino_signaling__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lumino/widgets */ \"webpack/sharing/consume/default/@lumino/widgets/@lumino/widgets\");\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @jupyter-notebook/tree */ \"webpack/sharing/consume/default/@jupyter-notebook/tree/@jupyter-notebook/tree\");\n/* harmony import */ var _jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _fileactions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fileactions */ \"../packages/tree-extension/lib/fileactions.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The file browser factory.\n */\nconst FILE_BROWSER_FACTORY = 'FileBrowser';\n/**\n * The file browser plugin id.\n */\nconst FILE_BROWSER_PLUGIN_ID = '@jupyterlab/filebrowser-extension:browser';\n/**\n * The namespace for command IDs.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    // The command to activate the filebrowser widget in tree view.\n    CommandIDs.activate = 'filebrowser:activate';\n    // Activate the file filter in the file browser\n    CommandIDs.toggleFileFilter = 'filebrowser:toggle-file-filter';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Plugin to add extra commands to the file browser to create\n * new notebooks, files, consoles and terminals\n */\nconst createNew = {\n    id: '@jupyter-notebook/tree-extension:new',\n    description: 'Plugin to add extra commands to the file browser to create new notebooks, files, consoles and terminals.',\n    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.IToolbarWidgetRegistry],\n    autoStart: true,\n    activate: (app, translator, toolbarRegistry) => {\n        var _a;\n        const { commands, serviceManager } = app;\n        const trans = translator.load('notebook');\n        const overflowOptions = {\n            overflowMenuOptions: { isVisible: false },\n        };\n        const menubar = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.MenuBar(overflowOptions);\n        const newMenu = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Menu({ commands });\n        newMenu.title.label = trans.__('New');\n        newMenu.title.icon = _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7__.caretDownIcon;\n        menubar.addMenu(newMenu);\n        const populateNewMenu = () => {\n            var _a, _b;\n            // create an entry per kernel spec for creating a new notebook\n            const specs = (_b = (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs;\n            for (const name in specs) {\n                newMenu.addItem({\n                    args: { kernelName: name, isLauncher: true },\n                    command: 'notebook:create-new',\n                });\n            }\n            const baseCommands = [\n                'terminal:create-new',\n                'console:create',\n                'filebrowser:create-new-file',\n                'filebrowser:create-new-directory',\n            ];\n            baseCommands.forEach((command) => {\n                newMenu.addItem({ command });\n            });\n        };\n        (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specsChanged.connect(() => {\n            newMenu.clearItems();\n            populateNewMenu();\n        });\n        populateNewMenu();\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'new-dropdown', (browser) => {\n                const menubar = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.MenuBar(overflowOptions);\n                menubar.addMenu(newMenu);\n                menubar.addClass('jp-DropdownMenu');\n                return menubar;\n            });\n        }\n    },\n};\n/**\n * A plugin to add file browser actions to the file browser toolbar.\n */\nconst fileActions = {\n    id: '@jupyter-notebook/tree-extension:file-actions',\n    description: 'A plugin to add file browser actions to the file browser toolbar.',\n    autoStart: true,\n    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.IDefaultFileBrowser, _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.IToolbarWidgetRegistry, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, browser, toolbarRegistry, translator) => {\n        // TODO: use upstream signal when available to detect selection changes\n        // https://github.com/jupyterlab/jupyterlab/issues/14598\n        const selectionChanged = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_8__.Signal(browser);\n        const methods = [\n            '_selectItem',\n            '_handleMultiSelect',\n            'handleFileSelect',\n        ];\n        methods.forEach((method) => {\n            const original = browser['listing'][method];\n            browser['listing'][method] = (...args) => {\n                original.call(browser['listing'], ...args);\n                selectionChanged.emit(void 0);\n            };\n        });\n        browser.model.pathChanged.connect(() => {\n            selectionChanged.emit(void 0);\n        });\n        // Create a toolbar item that adds buttons to the file browser toolbar\n        // to perform actions on the files\n        const { commands } = app;\n        const fileActions = new _fileactions__WEBPACK_IMPORTED_MODULE_11__.FilesActionButtons({\n            commands,\n            browser,\n            selectionChanged,\n            translator,\n        });\n        for (const widget of fileActions.widgets) {\n            toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, widget.id, () => widget);\n        }\n    },\n};\n/**\n * A plugin to set the default file browser settings.\n */\nconst fileBrowserSettings = {\n    id: '@jupyter-notebook/tree-extension:settings',\n    description: 'Set up the default file browser settings',\n    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.IDefaultFileBrowser],\n    optional: [_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__.ISettingRegistry],\n    autoStart: true,\n    activate: (app, browser, settingRegistry) => {\n        // Default config for notebook.\n        // This is a different set of defaults than JupyterLab.\n        const defaultFileBrowserConfig = {\n            navigateToCurrentDirectory: false,\n            singleClickNavigation: true,\n            showLastModifiedColumn: true,\n            showFileSizeColumn: true,\n            showHiddenFiles: false,\n            showFileCheckboxes: true,\n            sortNotebooksFirst: true,\n            showFullPath: false,\n        };\n        // Apply defaults on plugin activation\n        let key;\n        for (key in defaultFileBrowserConfig) {\n            browser[key] = defaultFileBrowserConfig[key];\n        }\n        if (settingRegistry) {\n            void settingRegistry.load(FILE_BROWSER_PLUGIN_ID).then((settings) => {\n                function onSettingsChanged(settings) {\n                    let key;\n                    for (key in defaultFileBrowserConfig) {\n                        const value = settings.get(key).user;\n                        // only set the setting if it is defined by the user\n                        if (value !== undefined) {\n                            browser[key] = value;\n                        }\n                    }\n                }\n                settings.changed.connect(onSettingsChanged);\n                onSettingsChanged(settings);\n            });\n        }\n    },\n};\n/**\n * A plugin to add the file filter toggle command to the palette\n */\nconst fileFilterCommand = {\n    id: '@jupyter-notebook/tree-extension:file-filter-command',\n    description: 'A plugin to add file filter command to the palette.',\n    autoStart: true,\n    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ICommandPalette],\n    activate: (app, palette) => {\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.toggleFileFilter,\n                category: 'File Browser',\n            });\n        }\n    },\n};\n/**\n * Plugin to load the default plugins that are loaded on all the Notebook pages\n * (tree, edit, view, etc.) so they are visible in the settings editor.\n */\nconst loadPlugins = {\n    id: '@jupyter-notebook/tree-extension:load-plugins',\n    description: 'Plugin to load the default plugins that are loaded on all the Notebook pages (tree, edit, view, etc.) so they are visible in the settings editor.',\n    autoStart: true,\n    requires: [_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__.ISettingRegistry],\n    activate(app, settingRegistry) {\n        const { isDisabled } = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.PageConfig.Extension;\n        const connector = settingRegistry.connector;\n        const allPluginsOption = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.PageConfig.getOption('allPlugins');\n        if (!allPluginsOption) {\n            return;\n        }\n        // build the list of plugins shipped by default on the all the notebook pages\n        // this avoid explicitly loading `'all'` plugins such as the ones used\n        // in JupyterLab only\n        const allPlugins = JSON.parse(allPluginsOption);\n        const pluginsSet = new Set();\n        Object.keys(allPlugins).forEach((key) => {\n            const extensionsAndPlugins = allPlugins[key];\n            Object.keys(extensionsAndPlugins).forEach((plugin) => {\n                const value = extensionsAndPlugins[plugin];\n                if (typeof value === 'boolean' && value) {\n                    pluginsSet.add(plugin);\n                }\n                else if (Array.isArray(value)) {\n                    value.forEach((v) => {\n                        pluginsSet.add(v);\n                    });\n                }\n            });\n        });\n        app.restored.then(async () => {\n            const plugins = await connector.list('all');\n            plugins.ids.forEach(async (id) => {\n                const [extension] = id.split(':');\n                // load the plugin if it is built-in the notebook application explicitly\n                // either included as an extension or as a plugin directly\n                const hasPlugin = pluginsSet.has(extension) || pluginsSet.has(id);\n                if (!hasPlugin || isDisabled(id) || id in settingRegistry.plugins) {\n                    return;\n                }\n                try {\n                    await settingRegistry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                }\n            });\n        });\n    },\n};\n/**\n * A plugin to add file browser commands for the tree view.\n */\nconst openFileBrowser = {\n    id: '@jupyter-notebook/tree-extension:open-file-browser',\n    description: 'A plugin to add file browser commands for the tree view.',\n    requires: [_jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10__.INotebookTree, _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.IDefaultFileBrowser],\n    autoStart: true,\n    activate: (app, notebookTree, browser) => {\n        const { commands } = app;\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                notebookTree.currentWidget = browser;\n            },\n        });\n    },\n};\n/**\n * A plugin to add the file browser widget to an INotebookShell\n */\nconst notebookTreeWidget = {\n    id: '@jupyter-notebook/tree-extension:widget',\n    description: 'A plugin to add the file browser widget to an INotebookShell.',\n    requires: [\n        _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.IDefaultFileBrowser,\n        _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator,\n        _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__.ISettingRegistry,\n        _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.IToolbarWidgetRegistry,\n        _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.IFileBrowserFactory,\n    ],\n    optional: [\n        _jupyterlab_running__WEBPACK_IMPORTED_MODULE_4__.IRunningSessionManagers,\n        _jupyterlab_settingeditor__WEBPACK_IMPORTED_MODULE_5__.ISettingEditorTracker,\n        _jupyterlab_settingeditor__WEBPACK_IMPORTED_MODULE_5__.IJSONSettingEditorTracker,\n    ],\n    autoStart: true,\n    provides: _jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10__.INotebookTree,\n    activate: (app, browser, translator, settingRegistry, toolbarRegistry, factory, manager, settingEditorTracker, jsonSettingEditorTracker) => {\n        const nbTreeWidget = new _jupyter_notebook_tree__WEBPACK_IMPORTED_MODULE_10__.NotebookTreeWidget();\n        const trans = translator.load('notebook');\n        browser.title.label = trans.__('Files');\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        browser.title.icon = _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7__.folderIcon;\n        nbTreeWidget.addWidget(browser);\n        nbTreeWidget.tabBar.addTab(browser.title);\n        nbTreeWidget.tabsMovable = false;\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'uploader', (browser) => new _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_2__.Uploader({\n            model: browser.model,\n            translator,\n            label: trans.__('Upload'),\n        }));\n        (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.setToolbar)(browser, (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.createToolbarFactory)(toolbarRegistry, settingRegistry, FILE_BROWSER_FACTORY, notebookTreeWidget.id, translator));\n        if (manager) {\n            const running = new _jupyterlab_running__WEBPACK_IMPORTED_MODULE_4__.RunningSessions(manager, translator);\n            running.id = 'jp-running-sessions-tree';\n            running.title.label = trans.__('Running');\n            running.title.icon = _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_7__.runningIcon;\n            nbTreeWidget.addWidget(running);\n            nbTreeWidget.tabBar.addTab(running.title);\n        }\n        app.shell.add(nbTreeWidget, 'main', { rank: 100 });\n        // add a separate tab for each setting editor\n        [settingEditorTracker, jsonSettingEditorTracker].forEach((editorTracker) => {\n            if (editorTracker) {\n                editorTracker.widgetAdded.connect((_, editor) => {\n                    nbTreeWidget.addWidget(editor);\n                    nbTreeWidget.tabBar.addTab(editor.title);\n                    nbTreeWidget.currentWidget = editor;\n                });\n            }\n        });\n        const { tracker } = factory;\n        // TODO: remove\n        // Workaround to force the focus on the default file browser\n        // See https://github.com/jupyterlab/jupyterlab/issues/15629 for more info\n        const setCurrentToDefaultBrower = () => {\n            tracker['_pool'].current = browser;\n        };\n        tracker.widgetAdded.connect((sender, widget) => {\n            setCurrentToDefaultBrower();\n        });\n        setCurrentToDefaultBrower();\n        return nbTreeWidget;\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    createNew,\n    fileActions,\n    fileBrowserSettings,\n    fileFilterCommand,\n    loadPlugins,\n    openFileBrowser,\n    notebookTreeWidget,\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);\n\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/tree-extension/lib/index.js?\n}");

/***/ })

}]);