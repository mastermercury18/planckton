"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["packages_notebook-extension_lib_index_js"],{

/***/ "../packages/notebook-extension/lib/index.js":
/*!***************************************************!*\
  !*** ../packages/notebook-extension/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   plancktonIcon: () => (/* binding */ plancktonIcon)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/docmanager */ \"webpack/sharing/consume/default/@jupyterlab/docmanager/@jupyterlab/docmanager\");\n/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/mainmenu */ \"webpack/sharing/consume/default/@jupyterlab/mainmenu/@jupyterlab/mainmenu\");\n/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/notebook */ \"webpack/sharing/consume/default/@jupyterlab/notebook/@jupyterlab/notebook\");\n/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/settingregistry */ \"webpack/sharing/consume/default/@jupyterlab/settingregistry/@jupyterlab/settingregistry\");\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jupyter-notebook/application */ \"webpack/sharing/consume/default/@jupyter-notebook/application/@jupyter-notebook/application\");\n/* harmony import */ var _jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lumino/polling */ \"webpack/sharing/consume/default/@lumino/polling/@lumino/polling\");\n/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_lumino_polling__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lumino/widgets */ \"webpack/sharing/consume/default/@lumino/widgets/@lumino/widgets\");\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _trusted__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trusted */ \"../packages/notebook-extension/lib/trusted.js\");\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @jupyterlab/ui-components */ \"webpack/sharing/consume/default/@jupyterlab/ui-components/@jupyterlab/ui-components\");\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _style_icons_planckton_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../style/icons/planckton.svg */ \"../packages/notebook-extension/style/icons/planckton.svg\");\n/* harmony import */ var _planckton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./planckton */ \"../packages/notebook-extension/lib/planckton.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Module-level variable to persist the Planckton widget\nlet plancktonWidget = null;\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-NotebookKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-NotebookKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-NotebookKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-NotebookKernelStatus-fade';\n/**\n * The class for scrolled outputs\n */\nconst SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';\n/**\n * The class for the full width notebook\n */\nconst FULL_WIDTH_NOTEBOOK_CLASS = 'jp-mod-fullwidth';\n/**\n * The command IDs used by the notebook plugins.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * A command to open right sidebar for Editing Notebook Metadata\n     */\n    CommandIDs.openEditNotebookMetadata = 'notebook:edit-metadata';\n    /**\n     * A command to toggle full width of the notebook\n     */\n    CommandIDs.toggleFullWidth = 'notebook:toggle-full-width';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@jupyter-notebook/notebook-extension:checkpoints',\n    description: 'A plugin for the checkpoint indicator.',\n    autoStart: true,\n    requires: [_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__.IDocumentManager, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    optional: [_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__.INotebookShell, _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.IToolbarWidgetRegistry],\n    activate: (app, docManager, translator, notebookShell, toolbarRegistry) => {\n        const { shell } = app;\n        const trans = translator.load('notebook');\n        const node = document.createElement('div');\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'checkpoint', (toolbar) => {\n                const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget({ node });\n                widget.id = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.DOMUtils.createDomID();\n                widget.addClass('jp-NotebookCheckpoint');\n                return widget;\n            });\n        }\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints || !checkpoints.length) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            node.textContent = trans.__('Last Checkpoint: %1', _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        if (notebookShell) {\n            notebookShell.currentChanged.connect(onChange);\n        }\n        new _lumino_polling__WEBPACK_IMPORTED_MODULE_8__.Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false,\n            },\n            standby: 'when-hidden',\n        });\n    },\n};\n/**\n * Add a command to close the browser tab when clicking on \"Close and Shut Down\"\n */\nconst closeTab = {\n    id: '@jupyter-notebook/notebook-extension:close-tab',\n    description: 'Add a command to close the browser tab when clicking on \"Close and Shut Down\".',\n    autoStart: true,\n    requires: [_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__.IMainMenu],\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, menu, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:close-and-halt';\n        commands.addCommand(id, {\n            label: trans.__('Close and Shut Down Notebook'),\n            execute: async () => {\n                // Shut the kernel down, without confirmation\n                await commands.execute('notebook:shutdown-kernel', { activate: false });\n                window.close();\n            },\n        });\n        menu.fileMenu.closeAndCleaners.add({\n            id,\n            // use a small rank to it takes precedence over the default\n            // shut down action for the notebook\n            rank: 0,\n        });\n    },\n};\n/**\n * Add a command to open the tree view from the notebook view\n */\nconst openTreeTab = {\n    id: '@jupyter-notebook/notebook-extension:open-tree-tab',\n    description: 'Add a command to open a browser tab on the tree view when clicking \"Open...\".',\n    autoStart: true,\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:open-tree-tab';\n        commands.addCommand(id, {\n            label: trans.__('Open…'),\n            execute: async () => {\n                const url = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.URLExt.join(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.PageConfig.getBaseUrl(), 'tree');\n                window.open(url);\n            },\n        });\n    },\n};\n/**\n * A plugin to set the notebook to full width.\n */\nconst fullWidthNotebook = {\n    id: '@jupyter-notebook/notebook-extension:full-width-notebook',\n    description: 'A plugin to set the notebook to full width.',\n    autoStart: true,\n    requires: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTracker],\n    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ICommandPalette, _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__.ISettingRegistry, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, tracker, palette, settingRegistry, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.nullTranslator).load('notebook');\n        let fullWidth = false;\n        const toggleFullWidth = () => {\n            const current = tracker.currentWidget;\n            fullWidth = !fullWidth;\n            if (!current) {\n                return;\n            }\n            const content = current;\n            content.toggleClass(FULL_WIDTH_NOTEBOOK_CLASS, fullWidth);\n        };\n        let notebookSettings;\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(fullWidthNotebook.id);\n            const updateSettings = (settings) => {\n                const newFullWidth = settings.get('fullWidthNotebook')\n                    .composite;\n                if (newFullWidth !== fullWidth) {\n                    toggleFullWidth();\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                notebookSettings = settings;\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        app.commands.addCommand(CommandIDs.toggleFullWidth, {\n            label: trans.__('Enable Full Width Notebook'),\n            execute: () => {\n                toggleFullWidth();\n                if (notebookSettings) {\n                    notebookSettings.set('fullWidthNotebook', fullWidth);\n                }\n            },\n            isEnabled: () => tracker.currentWidget !== null,\n            isToggled: () => fullWidth,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.toggleFullWidth,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@jupyter-notebook/notebook-extension:kernel-logo',\n    description: 'The kernel logo plugin.',\n    autoStart: true,\n    requires: [_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__.INotebookShell],\n    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.IToolbarWidgetRegistry],\n    activate: (app, shell, toolbarRegistry) => {\n        const { serviceManager } = app;\n        const node = document.createElement('div');\n        const img = document.createElement('img');\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            const current = shell.currentWidget;\n            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {\n                return;\n            }\n            if (!node.hasChildNodes()) {\n                node.appendChild(img);\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                node.childNodes[0].remove();\n                return;\n            }\n            const kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                node.childNodes[0].remove();\n                return;\n            }\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n        };\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'kernelLogo', (toolbar) => {\n                const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget({ node });\n                widget.addClass('jp-NotebookKernelLogo');\n                return widget;\n            });\n        }\n        app.started.then(() => {\n            shell.currentChanged.connect(onChange);\n        });\n    },\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@jupyter-notebook/notebook-extension:kernel-status',\n    description: 'A plugin to display the kernel status.',\n    autoStart: true,\n    requires: [_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__.INotebookShell, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, shell, translator) => {\n        const trans = translator.load('notebook');\n        const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget();\n        widget.addClass('jp-NotebookKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = trans.__(text);\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to enable scrolling for outputs by default.\n * Mimic the logic from the classic notebook, as found here:\n * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120\n */\nconst scrollOutput = {\n    id: '@jupyter-notebook/notebook-extension:scroll-output',\n    description: 'A plugin to enable scrolling for outputs by default.',\n    autoStart: true,\n    requires: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTracker],\n    optional: [_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__.ISettingRegistry],\n    activate: async (app, tracker, settingRegistry) => {\n        const autoScrollThreshold = 100;\n        let autoScrollOutputs = true;\n        // decide whether to scroll the output of the cell based on some heuristics\n        const autoScroll = (cell) => {\n            if (!autoScrollOutputs) {\n                // bail if disabled via the settings\n                cell.removeClass(SCROLLED_OUTPUTS_CLASS);\n                return;\n            }\n            const { outputArea } = cell;\n            // respect cells with an explicit scrolled state\n            const scrolled = cell.model.getMetadata('scrolled');\n            if (scrolled !== undefined) {\n                return;\n            }\n            const { node } = outputArea;\n            const height = node.scrollHeight;\n            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));\n            const lineHeight = (fontSize || 14) * 1.3;\n            // do not set via cell.outputScrolled = true, as this would\n            // otherwise synchronize the scrolled state to the notebook metadata\n            const scroll = height > lineHeight * autoScrollThreshold;\n            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);\n        };\n        const handlers = {};\n        const setAutoScroll = (cell) => {\n            if (cell.model.type === 'code') {\n                const codeCell = cell;\n                const id = codeCell.model.id;\n                autoScroll(codeCell);\n                if (handlers[id]) {\n                    codeCell.outputArea.model.changed.disconnect(handlers[id]);\n                }\n                handlers[id] = () => autoScroll(codeCell);\n                codeCell.outputArea.model.changed.connect(handlers[id]);\n            }\n        };\n        tracker.widgetAdded.connect((sender, notebook) => {\n            var _a;\n            // when the notebook widget is created, process all the cells\n            notebook.sessionContext.ready.then(() => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, args) => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(scrollOutput.id);\n            const updateSettings = (settings) => {\n                autoScrollOutputs = settings.get('autoScrollOutputs')\n                    .composite;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    },\n};\n/**\n * A plugin to add the NotebookTools to the side panel;\n */\nconst notebookToolsWidget = {\n    id: '@jupyter-notebook/notebook-extension:notebook-tools',\n    description: 'A plugin to add the NotebookTools to the side panel.',\n    autoStart: true,\n    requires: [_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__.INotebookShell],\n    optional: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTools],\n    activate: (app, shell, notebookTools) => {\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {\n                return;\n            }\n            // Add the notebook tools in right area.\n            if (notebookTools) {\n                shell.add(notebookTools, 'right', { type: 'Property Inspector' });\n            }\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to update the tab icon based on the kernel status.\n */\nconst tabIcon = {\n    id: '@jupyter-notebook/notebook-extension:tab-icon',\n    description: 'A plugin to update the tab icon based on the kernel status.',\n    autoStart: true,\n    requires: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTracker],\n    activate: (app, tracker) => {\n        // the favicons are provided by Jupyter Server\n        const baseURL = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.PageConfig.getBaseUrl();\n        const notebookIcon = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.URLExt.join(baseURL, 'static/favicons/favicon-notebook.ico');\n        const busyIcon = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.URLExt.join(baseURL, 'static/favicons/favicon-busy-1.ico');\n        const updateBrowserFavicon = (status) => {\n            const link = document.querySelector(\"link[rel*='icon']\");\n            switch (status) {\n                case 'busy':\n                    link.href = busyIcon;\n                    break;\n                case 'idle':\n                    link.href = notebookIcon;\n                    break;\n            }\n        };\n        const onChange = async () => {\n            const current = tracker.currentWidget;\n            const sessionContext = current === null || current === void 0 ? void 0 : current.sessionContext;\n            if (!sessionContext) {\n                return;\n            }\n            sessionContext.statusChanged.connect(() => {\n                const status = sessionContext.kernelDisplayStatus;\n                updateBrowserFavicon(status);\n            });\n        };\n        tracker.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin that adds a Trusted indicator to the menu area\n */\nconst trusted = {\n    id: '@jupyter-notebook/notebook-extension:trusted',\n    description: 'A plugin that adds a Trusted indicator to the menu area.',\n    autoStart: true,\n    requires: [_jupyter_notebook_application__WEBPACK_IMPORTED_MODULE_7__.INotebookShell, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],\n    activate: (app, notebookShell, translator) => {\n        const onChange = async () => {\n            const current = notebookShell.currentWidget;\n            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {\n                return;\n            }\n            const notebook = current.content;\n            await current.context.ready;\n            const widget = _trusted__WEBPACK_IMPORTED_MODULE_11__.TrustedComponent.create({ notebook, translator });\n            notebookShell.add(widget, 'menu', {\n                rank: 11000,\n            });\n        };\n        notebookShell.currentChanged.connect(onChange);\n    },\n};\n/**\n * Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu\n */\nconst editNotebookMetadata = {\n    id: '@jupyter-notebook/notebook-extension:edit-notebook-metadata',\n    description: 'Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu',\n    autoStart: true,\n    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ICommandPalette, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator, _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTools],\n    activate: (app, palette, translator, notebookTools) => {\n        const { commands, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.nullTranslator;\n        const trans = translator.load('notebook');\n        commands.addCommand(CommandIDs.openEditNotebookMetadata, {\n            label: trans.__('Edit Notebook Metadata'),\n            execute: async () => {\n                const command = 'application:toggle-panel';\n                const args = {\n                    side: 'right',\n                    title: 'Show Notebook Tools',\n                    id: 'notebook-tools',\n                };\n                // Check if Show Notebook Tools (Right Sidebar) is open (expanded)\n                if (!commands.isToggled(command, args)) {\n                    await commands.execute(command, args).then((_) => {\n                        // For expanding the 'Advanced Tools' section (default: collapsed)\n                        if (notebookTools) {\n                            const tools = (notebookTools === null || notebookTools === void 0 ? void 0 : notebookTools.layout).widgets;\n                            tools.forEach((tool) => {\n                                if (tool.widget.title.label === trans.__('Advanced Tools') &&\n                                    tool.collapsed) {\n                                    tool.toggle();\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            isVisible: () => shell.currentWidget !== null &&\n                shell.currentWidget instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.openEditNotebookMetadata,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * A plugin to add the Planckton AI chat panel and toolbar button to the notebook UI.\n */\nconst PLANCKTON_PANEL_ID = 'jp-PlancktonPanel';\nconst plancktonPanel = {\n    id: '@jupyter-notebook/notebook-extension:planckton-panel',\n    description: 'A plugin to add the Planckton AI chat panel and toolbar button to the notebook UI.',\n    autoStart: true,\n    requires: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTracker],\n    activate: (app, tracker) => {\n        app.docRegistry.addWidgetExtension('Notebook', {\n            createNew: (panel) => {\n                // Add the Planckton button to the toolbar\n                const button = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ToolbarButton({\n                    className: 'jp-PlancktonToolbarButton',\n                    icon: plancktonIcon,\n                    tooltip: 'Open Planckton AI Assistant',\n                    onClick: () => {\n                        console.log('[Planckton] Planckton toolbar button clicked');\n                        // Only add the panel if it doesn't already exist\n                        let widget = Array.from(app.shell.widgets('main')).find(w => w.id === PLANCKTON_PANEL_ID);\n                        if (!widget) {\n                            console.log('[Planckton] Creating new Planckton chat panel');\n                            // Use the actual Planckton ReactWidget\n                            plancktonWidget = _planckton__WEBPACK_IMPORTED_MODULE_12__.PlancktonComponent.create();\n                            plancktonWidget.id = PLANCKTON_PANEL_ID;\n                            plancktonWidget.title.label = 'Planckton AI Assistant';\n                            plancktonWidget.title.closable = true;\n                            app.shell.add(plancktonWidget, 'right');\n                            plancktonWidget.show();\n                            plancktonWidget.update();\n                            console.log('[Planckton] Planckton chat panel added and shown');\n                        }\n                        else {\n                            console.log('[Planckton] Planckton chat panel already exists, activating');\n                            app.shell.activateById(PLANCKTON_PANEL_ID);\n                        }\n                    }\n                });\n                panel.toolbar.insertAfter('debug', 'planckton', button);\n                return button;\n            }\n        });\n    }\n};\n/**\n * Register the Planckton icon\n */\nconst plancktonIcon = new _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_10__.LabIcon({\n    name: 'notebook-extension:planckton',\n    svgstr: _style_icons_planckton_svg__WEBPACK_IMPORTED_MODULE_13__\n});\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    closeTab,\n    openTreeTab,\n    editNotebookMetadata,\n    fullWidthNotebook,\n    kernelLogo,\n    kernelStatus,\n    notebookToolsWidget,\n    scrollOutput,\n    tabIcon,\n    trusted,\n    plancktonPanel,\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);\n\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/notebook-extension/lib/index.js?\n}");

/***/ }),

/***/ "../packages/notebook-extension/lib/planckton.js":
/*!*******************************************************!*\
  !*** ../packages/notebook-extension/lib/planckton.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlancktonComponent: () => (/* binding */ PlancktonComponent)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst PLANCKTON_API = '/api/planckton';\nconst PlancktonPanel = () => {\n    console.log('[Planckton] PlancktonPanel React component rendered');\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const sendMessage = async () => {\n        if (!input.trim())\n            return;\n        const userMsg = { sender: 'user', text: input };\n        setMessages((msgs) => [...msgs, userMsg]);\n        setInput('');\n        setLoading(true);\n        try {\n            const res = await fetch(PLANCKTON_API, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ message: input, context: {} }),\n                credentials: 'same-origin',\n            });\n            const data = await res.json();\n            setMessages((msgs) => [\n                ...msgs,\n                { sender: 'planckton', text: data.reply || 'No response.' },\n            ]);\n        }\n        catch (e) {\n            setMessages((msgs) => [\n                ...msgs,\n                { sender: 'planckton', text: 'Error contacting Planckton.' },\n            ]);\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"jp-PlancktonPanel\" },\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"jp-PlancktonPanel-header\" }, \"Planckton AI Assistant\"),\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"jp-PlancktonPanel-messages\" },\n            messages.map((msg, i) => (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: i, className: `jp-PlancktonPanel-msg jp-PlancktonPanel-msg-${msg.sender}` },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"b\", null,\n                    msg.sender === 'user' ? 'You' : 'Planckton',\n                    \":\"),\n                \" \",\n                msg.text))),\n            loading && react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"jp-PlancktonPanel-msg jp-PlancktonPanel-msg-planckton\" }, \"Planckton is thinking...\")),\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"jp-PlancktonPanel-input\" },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", { type: \"text\", value: input, onChange: e => setInput(e.target.value), onKeyDown: e => { if (e.key === 'Enter')\n                    sendMessage(); }, placeholder: \"Ask Planckton...\", disabled: loading }),\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", { onClick: sendMessage, disabled: loading || !input.trim() }, \"Send\"))));\n};\nvar PlancktonComponent;\n(function (PlancktonComponent) {\n    PlancktonComponent.create = () => {\n        return _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ReactWidget.create(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PlancktonPanel, null));\n    };\n})(PlancktonComponent || (PlancktonComponent = {}));\n\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/notebook-extension/lib/planckton.js?\n}");

/***/ }),

/***/ "../packages/notebook-extension/lib/trusted.js":
/*!*****************************************************!*\
  !*** ../packages/notebook-extension/lib/trusted.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrustedComponent: () => (/* binding */ TrustedComponent)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/notebook */ \"webpack/sharing/consume/default/@jupyterlab/notebook/@jupyterlab/notebook\");\n/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/**\n * Check if a notebook is trusted\n * @param notebook The notebook to check\n * @returns true if the notebook is trusted, false otherwise\n */\nconst isTrusted = (notebook) => {\n    const model = notebook.model;\n    if (!model) {\n        return false;\n    }\n    const cells = Array.from(model.cells);\n    let total = 0;\n    let trusted = 0;\n    for (const currentCell of cells) {\n        if (currentCell.type !== 'code') {\n            continue;\n        }\n        total++;\n        if (currentCell.trusted) {\n            trusted++;\n        }\n    }\n    return trusted === total;\n};\n/**\n * A React component to display the Trusted badge in the menu bar.\n * @param notebook The Notebook\n * @param translator The Translation service\n */\nconst TrustedButton = ({ notebook, translator, }) => {\n    const trans = translator.load('notebook');\n    const [trusted, setTrusted] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(isTrusted(notebook));\n    const checkTrust = () => {\n        const v = isTrusted(notebook);\n        setTrusted(v);\n    };\n    const trust = async () => {\n        await _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__.NotebookActions.trust(notebook, translator);\n        checkTrust();\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {\n        notebook.modelContentChanged.connect(checkTrust);\n        notebook.activeCellChanged.connect(checkTrust);\n        checkTrust();\n        return () => {\n            notebook.modelContentChanged.disconnect(checkTrust);\n            notebook.activeCellChanged.disconnect(checkTrust);\n        };\n    });\n    return (react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"button\", { className: 'jp-NotebookTrustedStatus', style: !trusted ? { cursor: 'pointer' } : { cursor: 'help' }, onClick: () => !trusted && trust(), title: trusted\n            ? trans.__('JavaScript enabled for notebook display')\n            : trans.__('JavaScript disabled for notebook display') }, trusted ? trans.__('Trusted') : trans.__('Not Trusted')));\n};\n/**\n * A namespace for TrustedComponent static methods.\n */\nvar TrustedComponent;\n(function (TrustedComponent) {\n    /**\n     * Create a new TrustedComponent\n     *\n     * @param notebook The notebook\n     * @param translator The translator\n     */\n    TrustedComponent.create = ({ notebook, translator, }) => {\n        return _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.ReactWidget.create(react__WEBPACK_IMPORTED_MODULE_2___default().createElement(TrustedButton, { notebook: notebook, translator: translator }));\n    };\n})(TrustedComponent || (TrustedComponent = {}));\n\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/notebook-extension/lib/trusted.js?\n}");

/***/ }),

/***/ "../packages/notebook-extension/style/icons/planckton.svg":
/*!****************************************************************!*\
  !*** ../packages/notebook-extension/style/icons/planckton.svg ***!
  \****************************************************************/
/***/ ((module) => {

eval("{module.exports = \"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 20010904//EN\\\"\\n \\\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\\\">\\n<svg version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n width=\\\"300.000000pt\\\" height=\\\"249.000000pt\\\" viewBox=\\\"0 0 300.000000 249.000000\\\"\\n preserveAspectRatio=\\\"xMidYMid meet\\\">\\n<metadata>\\nCreated by potrace 1.10, written by Peter Selinger 2001-2011\\n</metadata>\\n<g transform=\\\"translate(0.000000,249.000000) scale(0.100000,-0.100000)\\\"\\nfill=\\\"#000000\\\" stroke=\\\"none\\\">\\n<path d=\\\"M973 2203 c-44 -30 -16 -95 47 -110 51 -12 143 -68 180 -110 39 -44\\n80 -120 80 -148 0 -8 -29 -43 -63 -78 -106 -105 -152 -223 -182 -467 -28 -218\\n-48 -258 -187 -370 -91 -74 -103 -94 -78 -141 23 -43 113 -4 219 94 22 20 45\\n37 50 37 11 0 12 -4 36 -110 21 -89 75 -211 139 -309 94 -146 106 -191 75\\n-283 -24 -72 -24 -73 3 -98 72 -67 148 46 135 202 -3 39 -11 76 -17 82 -5 5\\n-10 17 -10 25 0 9 -30 63 -66 121 -87 137 -121 214 -144 319 -30 135 -34 177\\n-32 311 4 353 119 562 311 564 139 0 245 -121 291 -332 26 -117 28 -330 5\\n-461 -28 -164 -52 -222 -173 -419 -61 -100 -84 -172 -81 -258 5 -137 85 -219\\n141 -144 18 25 18 27 -2 85 -14 41 -19 72 -15 98 6 42 47 128 90 191 46 68\\n114 211 129 272 8 32 19 74 25 92 5 18 10 36 10 39 -1 19 22 10 62 -25 122\\n-105 162 -125 204 -102 54 29 33 76 -68 153 -132 101 -162 157 -182 337 -3 30\\n-8 72 -10 93 -7 61 -44 206 -62 246 -28 60 -74 123 -125 171 -26 25 -48 53\\n-48 63 0 28 47 114 86 157 40 44 99 81 159 100 74 23 97 62 62 106 -18 23 -25\\n26 -65 20 -126 -17 -269 -132 -337 -270 -21 -42 -43 -77 -49 -77 -36 -5 -83\\n-3 -97 3 -9 4 -25 30 -34 57 -24 65 -108 167 -175 213 -52 35 -163 79 -199 77\\n-9 0 -26 -7 -38 -16z m163 -58 c111 -54 219 -186 240 -292 l6 -28 88 0 89 0 5\\n29 c13 61 69 156 125 209 87 83 244 153 265 118 13 -20 -4 -51 -28 -51 -40 0\\n-162 -68 -204 -114 -44 -48 -84 -118 -100 -179 -10 -37 -10 -38 27 -62 87 -54\\n166 -186 195 -325 9 -41 23 -132 31 -202 21 -193 51 -247 197 -355 48 -36 88\\n-71 88 -78 0 -19 -27 -38 -42 -29 -7 5 -47 34 -89 66 -82 61 -136 119 -145\\n156 -11 41 -21 22 -27 -50 -12 -152 -63 -292 -160 -443 -98 -152 -116 -232\\n-75 -326 18 -44 19 -52 6 -65 -41 -41 -83 42 -82 161 0 91 16 132 96 252 70\\n107 103 178 132 284 38 139 51 303 37 455 -14 148 -31 219 -72 301 -129 256\\n-413 257 -538 1 -105 -216 -103 -615 4 -880 13 -31 48 -96 79 -142 88 -137\\n116 -202 116 -282 0 -52 -25 -127 -51 -150 -18 -16 -21 -17 -36 -1 -16 15 -15\\n20 5 60 43 87 25 170 -71 319 -30 46 -64 102 -75 124 -31 62 -71 192 -82 269\\n-6 39 -13 85 -16 103 l-5 34 -32 -53 c-44 -74 -208 -206 -240 -193 -34 13 -17\\n42 56 96 147 112 188 178 207 338 27 231 41 291 92 393 33 66 93 136 144 167\\nl33 21 -20 56 c-24 71 -70 143 -117 184 -40 36 -150 89 -182 89 -23 0 -35 22\\n-26 46 9 24 65 12 152 -31z\\\"/>\\n<path d=\\\"M1270 1492 c-18 -14 -24 -32 -28 -75 -7 -86 4 -124 39 -142 63 -33\\n101 9 100 112 0 50 -5 74 -19 93 -24 31 -62 37 -92 12z m69 -26 c7 -9 11 -42\\n9 -87 -2 -55 -7 -74 -20 -83 -13 -8 -23 -8 -35 0 -14 9 -19 28 -21 83 -3 76 6\\n101 38 101 10 0 23 -6 29 -14z\\\"/>\\n<path d=\\\"M1576 1480 c-22 -27 -26 -41 -26 -97 0 -58 3 -67 29 -94 37 -37 55\\n-37 93 1 29 29 30 34 26 95 -7 112 -68 159 -122 95z m84 -26 c16 -41 12 -130\\n-6 -148 -22 -23 -53 -20 -63 7 -9 24 -7 140 4 157 13 21 55 11 65 -16z\\\"/>\\n</g>\\n</svg>\\n\";\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/notebook-extension/style/icons/planckton.svg?\n}");

/***/ })

}]);